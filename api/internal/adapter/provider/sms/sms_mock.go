// Code generated by MockGen. DO NOT EDIT.
// Source: ./contract.go
//
// Generated by this command:
//
//	mockgen -source=./contract.go -destination=./sms_mock.go -package=sms
//

// Package sms is a generated GoMock package.
package sms

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockISmsProvider is a mock of ISmsProvider interface.
type MockISmsProvider struct {
	ctrl     *gomock.Controller
	recorder *MockISmsProviderMockRecorder
	isgomock struct{}
}

// MockISmsProviderMockRecorder is the mock recorder for MockISmsProvider.
type MockISmsProviderMockRecorder struct {
	mock *MockISmsProvider
}

// NewMockISmsProvider creates a new mock instance.
func NewMockISmsProvider(ctrl *gomock.Controller) *MockISmsProvider {
	mock := &MockISmsProvider{ctrl: ctrl}
	mock.recorder = &MockISmsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISmsProvider) EXPECT() *MockISmsProviderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockISmsProvider) Send(phone, msg string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", phone, msg)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockISmsProviderMockRecorder) Send(phone, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockISmsProvider)(nil).Send), phone, msg)
}
